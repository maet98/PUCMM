%option noyywrap

D 		[0-9]
A 		[a-zA-Z]
ALFA	({D}|{A}) 
prog (?i:program)
%{
#include "Tokens.h"

int tokenCount;
%}

%%
({A}|"_")({A}|{D}|"_")*																							{return (_ID);}
"{"[^}]*"}"																										{return (_COMMENT);}
\"[^"]\"																										{return (_LITERAL);}
([-+]?[1-9]{D})|"0"																								{return (_ICONST); }
{D}+"."{D}+																										{return (_RCONST); }
{D}+("."{D}+)?"E""-"?{D}+																						{return (_ECONST);}
"["																												{return (_LBRACK);}
"]"																												{return (_RBRACK);}
"("																												{return (_LPAREN);}
")"																												{return (_RPAREN);}
";"																												{return (_SEMI);}
":"																												{return (_COLON);}
","																												{return (_COMMA);}
":""="																											{return (_ASSIGN);}
"+"																												{return (_PLUS);}
"-"																												{return (_MINUS);}
"*"																												{return (_MULT);}
"/"																												{return (_DIVIDE);}
"="																												{return (_EQL);}
"<"																												{return (_LESS);}
">"																												{return (_GTR);}
"<""="																											{return (_LEQ);}
">""="																											{return (_GEQ);}
"<"">"																											{return (_NEQ);}
program																											{return (_PROGRAM);}

.

%%

void yyerror(int tokenCount)
{
	printf("Hubo un error al analizar el lexema %s en la columna %d", yytext, tokenCount);
	exit(1);
}

int yywrap()
{
	return 1;
}
